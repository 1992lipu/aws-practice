{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template to ECS and run stuff in it",
    "Parameters": {
        "AppName": {
            "Type": "String",
            "Description": "App name"
        },
        "AppContainerPort": {
            "Type": "String",
            "Description": "App Container Port"
        },
        "AppHostPort": {
            "Type": "String",
            "Description": "App Host Port"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
        },
        "VpcId": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Select a VPC that allows instances to access the Internet."
        },
        "SubnetID": {
            "Type": "CommaDelimitedList",
            "Description": "Select at two subnets in your selected VPC."
        },
        "DesiredCapacity": {
            "Type": "Number",
            "Description": "Number of instances to launch in your ECS cluster."
        },
        "MaxSize": {
            "Type": "Number",
            "Description": "Maximum number of instances that can be launched in your ECS cluster."
        },
        "EcsClusterAuthType": {
            "Type": "String",
            "Description": "ECS Cluster Auth Type",
            "Default": "default"
        },
        "EcsClusterAuthData": {
            "Type": "String",
            "Description": "ECS Cluster Auth Data",
            "Default": "default"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "Please choose a valid instance type."
        },
        "EcsAmiId": {
            "Type": "String",
            "Description": "ECS EC2 AMI id",
            "Default": "ami-467ca739"
        }
    },
    "Mappings": {
        "AWSRegionToAMI": {
            "us-east-1": {
                "AMIID": "ami-eca289fb"
            }
        }
    },
    "Resources": {
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": "Analytics-Dev-Peers"
            }
        },
        "EcsSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Security Group",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "EcsSecurityGroupHTTPinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "9000",
                "ToPort": "9900",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "EcsSecurityGroupSSHinbound": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EcsSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "CloudwatchLogsGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Join": [
                        "-",
                        [
                            "ECSLogGroup",
                            {
                                "Ref": "AWS::StackName"
                            }
                        ]
                    ]
                },
                "RetentionInDays": 14
            }
        },
        "taskdefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Name": {
                            "Ref": "AppName"
                        },
                        "Image": "docker-amers.int.thomsonreuters.com:5001/nirvana/service-peers-boot:service-peers-boot.1.0.162.0",
                        "Cpu": "0",
                        "PortMappings": [
                            {
                                "ContainerPort": {
                                    "Ref": "AppContainerPort"
                                },
                                "HostPort": {
                                    "Ref": "AppHostPort"
                                }
                            }
                        ],
                        "Environment": [
                            {
                                "Name": "env",
                                "Value": "dev"
                            }
                        ],
                        "Memory": "500",
                        "Essential": "true"
                    }
                ]
            }
        },
        "ECSAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Ref": "SubnetID"
                },
                "LaunchConfigurationName": {
                    "Ref": "ContainerInstances"
                },
                "MinSize": "1",
                "MaxSize": {
                    "Ref": "MaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "DesiredCapacity"
                },
                "Tags": [
                    {
                        "Key": "tr:financial-identifier",
                        "Value": "450014377",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "tr:environment-type",
                        "Value": "DEV",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "tr:application-asset-insight-id",
                        "Value": "204257",
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT5M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingReplacingUpdate": {
                    "WillReplace": "true"
                }
            }
        },
        "ContainerInstances": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "EcsAmiId"
                },
                "SecurityGroups": [
                    {
                        "Ref": "EcsSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "AssociatePublicIpAddress": false,
                "IamInstanceProfile": {
                    "Ref": "EC2InstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Ref": "ECSCluster"
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "yum install -y aws-cfn-bootstrap\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource ECSAutoScalingGroup ",
                                "         --region us-east-1",
                                " >> /etc/ecs/ecs.config\n",
                                "echo ECS_ENGINE_AUTH_TYPE=",
                                {
                                    "Ref": "EcsClusterAuthType"
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "echo 'ECS_ENGINE_AUTH_DATA=",
                                {
                                    "Ref": "EcsClusterAuthData"
                                },
                                "'",
                                " >> /etc/ecs/ecs.config\n",
                                "\n",
                                "echo 'nameserver 10.204.50.29' | cat - /etc/resolv.conf > temp && mv temp /etc/resolv.conf\n",
                                "sudo -i\n",
                                "stop ecs\n",
                                "start ecs\n"
                            ]
                        ]
                    }
                }
            }
        },
        "service": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "DesiredCount": "1",
                "TaskDefinition": {
                    "Ref": "taskdefinition"
                }
            }
        },
        "ECSServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ecs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*",
                                        "ec2:AuthorizeSecurityGroupIngress"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ServiceScalingTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "DependsOn": "service",
            "Properties": {
                "MaxCapacity": 2,
                "MinCapacity": 1,
                "ResourceId": {
                    "Fn::Join": [
                        "",
                        [
                            "service/",
                            {
                                "Ref": "ECSCluster"
                            },
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "service",
                                    "Name"
                                ]
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "AutoscalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "ecs:service:DesiredCount",
                "ServiceNamespace": "ecs"
            }
        },
        "ServiceScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "AStepPolicy",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalingTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "PercentChangeInCapacity",
                    "Cooldown": 60,
                    "MetricAggregationType": "Average",
                    "StepAdjustments": [
                        {
                            "MetricIntervalLowerBound": 0,
                            "ScalingAdjustment": 200
                        }
                    ]
                }
            }
        },
        "ALB500sAlarmScaleUp": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "10",
                "AlarmDescription": "Alarm if our ALB generates too many HTTP 500s.",
                "Period": "60",
                "AlarmActions": [
                    {
                        "Ref": "ServiceScalingPolicy"
                    }
                ],
                "Namespace": "AWS/ApplicationELB",
                "Dimensions": [
                    {
                        "Name": "ECSService",
                        "Value": {
                            "Ref": "service"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "HTTPCode_ELB_5XX_Count"
            }
        },
        "CPUAlarmHighECS": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "80",
                "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
                "Period": "60",
                "AlarmActions": [
                    {
                        "Ref": "ServiceScalingPolicyHighCpuUsage"
                    }
                ],
                "Namespace": "AWS/ApplicationELB",
                "Dimensions": [
                    {
                        "Name": "ECSService",
                        "Value": {
                            "Ref": "service"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "ServiceScalingPolicyHighCpuUsage": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "CpuHighUsage",
                "PolicyType": "StepScaling",
                "ScalingTargetId": {
                    "Ref": "ServiceScalingTarget"
                },
                "StepScalingPolicyConfiguration": {
                    "AdjustmentType": "ChangeInCapacity",
                    "Cooldown": 60,
                    "MetricAggregationType": "Minimum",
                    "StepAdjustments": [
                        {
                            "ScalingAdjustment": 1,
                            "MetricIntervalLowerBound": 0
                        }
                    ]
                }
            }
        },
        "EC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "ecs-service",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ecs:CreateCluster",
                                        "ecs:DeregisterContainerInstance",
                                        "ecs:DiscoverPollEndpoint",
                                        "ecs:Poll",
                                        "ecs:RegisterContainerInstance",
                                        "ecs:StartTelemetrySession",
                                        "ecs:Submit*",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "s3*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "AutoscalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "service-autoscaling",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "application-autoscaling:*",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:PutMetricAlarm",
                                        "ecs:DescribeServices",
                                        "ecs:UpdateService"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2Role"
                    }
                ]
            }
        },
        "ScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "ECSAutoScalingGroup"
                },
                "Cooldown": "1",
                "ScalingAdjustment": "1"
            }
        },
        "ScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "ECSAutoScalingGroup"
                },
                "Cooldown": "1",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "80",
                "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
                "Period": "60",
                "AlarmActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "ECSAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "5",
                "AlarmDescription": "Alarm if CPU too low",
                "Period": "60",
                "AlarmActions": [
                    {
                        "Ref": "ScaleDownPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "ECSAutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold",
                "MetricName": "CPUUtilization"
            }
        }
    },
    "Outputs": {
        "ecsservice": {
            "Value": {
                "Ref": "service"
            }
        },
        "ecscluster": {
            "Value": {
                "Ref": "ECSCluster"
            }
        },
        "taskdef": {
            "Value": {
                "Ref": "taskdefinition"
            }
        }
    }
}